/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>

using namespace std;

class IOxyzenValueBreachObserver {
 public:
  virtual ~IObserver(){};
  virtual void Update(const std::string &message_from_subject) = 0;
};

class IOxyzenLevelMonitor {
 public:
  virtual ~IOxyzenLevelMonitor(){};
  virtual void Attach(IObserver *observer) = 0;
  virtual void Detach(IObserver *observer) = 0;
  virtual int getCurrenOxyzenLevel();=0;
};

class OxyzenLevelMonitor : public IOxyzenLevelMonitor {
 public:
  virtual ~OxyzenLevelMonitor() {
    std::cout << "Goodbye, I was the Subject.\n";
  }

  /**
   * The subscription management methods.
   */
  void Attach(IObserver *observer) override {
    list_observer_.push_back(observer);
  }
  void Detach(IObserver *observer) override {
    list_observer_.remove(observer);
  }
  void Notify() override {
      //Detect Breach in Oxyzen Level
    std::list<IObserver *>::iterator iterator = list_observer_.begin();
    
    while (iterator != list_observer_.end()) {
      (*iterator)->Update(message_);
      ++iterator;
    }
  }

  void CreateMessage(std::string message = "Empty") {
    this->message_ = message;
    Notify();
  }
  

  /**
   * Usually, the subscription logic is only a fraction of what a Subject can
   * really do. Subjects commonly hold some important business logic, that
   * triggers a notification method whenever something important is about to
   * happen (or after it).
   */
  void detectOxyzenLevelBreachLogic() {
    this->message_ = "change message message";
    Notify();
    
  }

 private:
  std::list<IObserver *> list_observer_;
  std::string message_;
};

lass AirFlowRegulator : public IObserver {
    private:
    
  std::string message_from_subject_;
  IOxyzenLevelMonitor &subject_;
 public:
  AirFlowRegulator(IOxyzenLevelMonitor &subject) : subject_(subject) {
    this->subject_.Attach(this);
    std::cout << "Hi, I'm the Observer \"" << ++Observer::static_number_ << "\".\n";
    
  }
  virtual ~AirFlowRegulator() {
    std::cout << "Goodbye, I was the Observer \"" << this->number_ << "\".\n";
  }

  void Update(const std::string &message_from_subject) override {
    message_from_subject_ = message_from_subject;
    regulateAirFlow();
  }
  void RemoveMeFromTheList() {
    subject_.Detach(this);
    std::cout << "Observer \"" << number_ << "\" removed from the list.\n";
  }
  void regulateAirFlow() {
    std::cout << "Observer \"" << this->number_ << "\": a new message is available --> " << this->message_from_subject_ << "\n";
  }
int main()
{
    IOxyzenLevelMonitor *subject = new OxyzenLevelMonitor();
  Observer *observer1 = new AirFlowRegulator(*subject);
  subject->detectOxyzenLevelBreachLogic();
  
    cout<<"Hello World";

    return 0;
}
